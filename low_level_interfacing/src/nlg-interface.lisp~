(in-package :llif)

(defparameter *talk-requests* NIL)

(defun publish-meaning-representation (meaning-representation)
    (with-ros-node ("/meaning_publisher")
        (let (pub (advertise "nlg_requests" "ngl_msgs/MeaningRepresentation")
            (publish-msg pub :data meaning-representation)))))

(defun listen-to-talk-requests ()
    (with-ros-node ("/talk_request_listener" :spin t)
    (subscribe "/talk_request" "tmc_msgs/Voice" #'talk-request-callback))

(defun mak-key-value-msg (key value)
    (roslisp:make-msg "nlg_msgs/KeyValuePair") key value))

(defun make-meaning-representation (key-value-pairs)
    (roslisp:make-msg "nlg_msgs/MeaningRepresentation" key-value-pairs))

(defun talk-request-callback (voice)
    (if (not *talk-requests*) 
        (setf *talk-requests* (list voice)) 
        (setf *talk-requests* (concat (list *talk-requests*) (list voice))))
    (roslisp:ros-info (talk-request) "Talk request received."))

(defun remove-talk-request ()
    (roslisp:ros-info (talk-request) "Removing talk request")
    (setf *talk-requests* (cdr *talk-requests*)))
