(in-package :llif)

(defparameter *can-manipulate-action-timeout* 30.0 "in seconds")
(defparameter *can-manipulate-action-client* NIL)

(defun get-make-nav-plan-action-client ()
  "returns the currently used can manipulate action client. If none yet exists,
   creates one."
  (or *can-manipulate-action-client*
      (init-can-handle-object-client)))

(defun init-can-handle-object-client ()
  "initializes the can-grasp-client and makes sure it is connected to the
action server."
  (setf *can-manipulate-action-client*
        (actionlib:make-action-client "/can_grasp_server"
                                      "manipulation_action_msgs/CanGrasp"))
  (loop until (actionlib:wait-for-server *can-manipulate-action-client*
                                         *can-manipulate-action-timeout*))

(defun call-can-manipulate-action (start-pose knowrob-object-id goal_pose object-size grasp-mode action-type)
    (multiple-value-bind (result status)
      (actionlib:call-goal (get-can-handle-object-clien)
                       (make-can-handle-object-action-goal 
                                                            start-pose 
                                                            knowrob-object-id 
                                                            goal_pose 
                                                            object-size 
                                                            grasp-mode 
                                                            action-type))
      (roslisp:ros-info (can-handle-action) "can grasp action finished")
      (values result status)))

(defun make-can-manipulate-action (start-pose knowrob-object-id goal_pose object-size grasp-mode action-type)
  (actionlib:make-action-goal
      (can-handle-object-action-client)
      ;; (cram-simple-actionlib-client::get-simple-action-client 'grasp-action)
    :goal_pose (cl-transforms-stamped:to-msg
                (cl-tf::make-pose-stamped  
                 "map"
                 0.0 
                 (cl-tf:make-3d-vector point-x-object point-y-object point-z-object) 
                 (cl-tf:make-quaternion quaterion-value-1 quaterion-value-2
                                        quaterion-value-3 quaterion-value-4)))
    :grasp_mode grasp-mode
    :object_frame_id object-id
    :object_size (roslisp:make-msg
                  "geometry_msgs/vector3"
                  :x size-x
                  :y size-y
                  :z size-z)))
