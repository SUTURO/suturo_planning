Vor map start, repl start sourcen und hsr_local

//sets the bullet world robot to the position of the real robot
(defun set-robot-to-real ()
           (roslisp:with-fields (rotation translation) (cl-tf::lookup-transform  (make-instance 'cl-tf2::buffer-client)  "map" "base_footprint") 
             (let ((?nav-pose (cl-tf:make-pose-stamped "map" 0 translation rotation))) 
               (urdf-proj:with-simulated-robot (exe:perform (desig:an action (type going) (target (desig:a location (pose ?nav_pose)))))))))




(cl-tf::lookup-transform  (make-instance 'cl-tf2::buffer-client)  "map" "base_footprint")
(cl-tf::lookup-transform  cram-tf::*transformer*  "map" "base_footprint")

//this is also in the set-robot-to-real function
//get navigation pose
(defvar ?nav_pose)
(roslisp:with-fields (rotation translation) (cl-tf::lookup-transform  (make-instance 'cl-tf2::buffer-client)  "map" "base_footprint") (cl-tf:make-pose-stamped "map" 0 translation rotation))
(setf ?nav_pose *)
//move command
(urdf-proj:with-simulated-robot (exe:perform (desig:an action (type going) (target (desig:a location (pose ?nav_pose))))


//add robot position (position and rotation from cl-tf lookup mit base_footprint)
(btr::add-vis-axis-object (cl-tf::make-pose (cl-tf::make-3d-vector -0.33294823535806595d0 1.2110807330302356d0 0.0d0) (cl-tf::make-quaternion 0.0d0 0.0d0 0.7315910614745733d0 0.6817437339429728d0)) 40)

//RELOAD
(swank:operate-on-system-for-emacs "cram-object-knowledge" (quote load-op))
(swank:operate-on-system-for-emacs "cram-hsrb-lab-demo" (quote load-op))
(swank:operate-on-system-for-emacs "cram-hsrb-description" (quote load-op)) 
(swank:operate-on-system-for-emacs "low-level-interfacing" (quote load-op)) 
(swank:operate-on-system-for-emacs "common-functions" (quote load-op)) 
(swank:operate-on-system-for-emacs "cram-hsrb-pick-demo" (quote load-op))

(setf demo::*kitchen-urdf* NIL)
(roslisp-utilities:startup-ros)

//add objects and designators
(btr-utils:spawn-object 'mug-1 :mug
  :pose (cl-transforms:make-pose
  (cl-tf:make-3d-vector 0.55 -0.5 0.85)
  (cl-tf:make-quaternion 0 0 0 1)))

(btr::object-pose 'mug-1) //mug pose (not stamped)
(setf ?mug-pose *)
(setf ?mug-pose (cl-tf:make-pose-stamped "map" 0 (cl-tf:origin ?mug-pose) (cl-tf:orientation ?mug-pose)))

//park robot
(btr-utils::park-robot)

//desig looking1
(urdf-proj:with-simulated-robot (cpl:with-retry-counters ((looking-retry 3))
      (cpl:with-failure-handling
          ((common-fail:low-level-failure
               (e)
             (declare (ignore e))
             (cpl:do-retry looking-retry
               (roslisp:ros-warn (slice-demo looking-fail)
                                 "~%Failed to look at given position~%")
               (cpl:retry))
             (roslisp:ros-warn (slice-demo looking-fail)
                               "~%No more retries~%")))
        (dotimes (n 3)
          (cram-executive:perform
           (desig:an action
                     (type looking)
                     (target (desig:a location (pose ?mug-pose)))))))))

//desig detecting
(cpl:with-retry-counters ((detecting-retry 5))
      (cpl:with-failure-handling
          ((common-fail:high-level-failure (e)
             (declare (ignore e))
             (cpl:do-retry detecting-retry
               (roslisp:ros-warn (slice-demo detecting-fail)
                                 "~%Failed to detect ~a~%" ?knife-type)
               (cpl:retry))
             (roslisp:ros-warn (slice-demo detecting file)
                               "~%No more retries~%")))
        (defvar ?object-mug
              (urdf-proj::detect (desig:an object (type :mug))))))

//Make a nav-goal

(setf ?nav-goal-pose (cl-transforms:make-pose (cl-tf:make-3d-vector -1.5 1 0)  (cl-tf:make-quaternion 0 0 0 1)))

(setf ?nav-goal-pose (cl-transforms-stamped:make-pose-stamped "map" 0 (cl-tf:origin ?nav-goal-pose) (cl-tf:orientation ?nav-goal-pose)))

(urdf-proj:with-simulated-robot (exe:perform (desig:an action (type going) (target (desig:a location (pose ?nav-goal-pose))))))


//object placing stuff
(llif::call-robosherlock-pipeline "robocup_shelf_2")
(setf *pipeline-msg* *)
(roslisp::ros-message-to-list *)
(defvar *pipeline-1* (roslisp:with-fields (detectiondata) *pipeline-msg* (print detectiondata)))
(delete-if (lambda (obj)
   (roslisp::with-fields (confidence_class width height) obj (if (> confidence_class 0.4) (progn (print  confidence_class) (print height) (print width)))) *pipeline-1*) *pipeline-1*)

//move with motion designator
(comp::with-hsr-process-modules (exe:perform (desig:a motion (type going) (target (desig:a location (pose ?nav-pose))))))

//more object placin 
(btr:add-object btr:*current-bullet-world* 
                         :primit-cylinder 'cylinder-1 '((0.5 0.5 0.05)(0 0 0 1)) 
                         :mass 0.5 :size (cl-tf:make-3d-vector 0.035 0.035 0.1))

btr:*current-bullet-world*
(btr-utils:kill-all-objects)

//physics on
(prolog:prolog '(and (btr:bullet-world ?world)
                              (btr:simulate ?world 10)))


